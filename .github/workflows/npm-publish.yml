name: NPM Packages Publish

on:
  release:
    types: [published]

jobs:
  guard:
    if: ${{ github.repository == 'Unto-Labs/thru' }}
    runs-on: ubuntu-latest
    outputs:
      should_publish: ${{ steps.guard.outputs.should_publish }}
      tag: ${{ steps.release.outputs.tag }}
      version: ${{ steps.release.outputs.version }}

    steps:
      - name: Determine release metadata
        id: release
        env:
          TAG_NAME: ${{ github.event.release.tag_name }}
        run: |
          TAG="$TAG_NAME"
          if [ -z "$TAG" ]; then
            echo "Release tag missing" >&2
            exit 1
          fi
          VERSION="${TAG#v}"
          if [ -z "$VERSION" ]; then
            echo "Unable to derive version from tag '$TAG'" >&2
            exit 1
          fi
          BASE_VERSION="${VERSION%%-*}"
          if [ -z "$BASE_VERSION" ]; then
            echo "Unable to derive base version from tag '$TAG'" >&2
            exit 1
          fi
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "version=$BASE_VERSION" >> "$GITHUB_OUTPUT"

      - name: Evaluate publish conditions
        id: guard
        env:
          IS_PRERELEASE: ${{ github.event.release.prerelease }}
        run: |
          if [ "$IS_PRERELEASE" = "true" ]; then
            echo "should_publish=false" >> "$GITHUB_OUTPUT"
          else
            echo "should_publish=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Publishing skipped
        if: ${{ steps.guard.outputs.should_publish != 'true' }}
        env:
          TAG: ${{ steps.release.outputs.tag }}
          IS_PRERELEASE: ${{ github.event.release.prerelease }}
        run: |
          echo "Skipping publish for tag $TAG (prerelease=$IS_PRERELEASE)"

  publish-npm-packages:
    needs: guard
    if: ${{ needs.guard.outputs.should_publish == 'true' && github.repository == 'Unto-Labs/thru' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      RELEASE_VERSION: ${{ needs.guard.outputs.version }}

    steps:
      - name: Checkout release tag
        uses: actions/checkout@v5
        with:
          ref: ${{ needs.guard.outputs.tag }}
          fetch-depth: 0

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm
          cache-dependency-path: web/pnpm-lock.yaml
          registry-url: https://registry.npmjs.org/

      - name: Install workspace dependencies
        working-directory: web
        run: pnpm install --frozen-lockfile

      - name: Sync package versions with release
        working-directory: web
        run: |
          if [ -z "$RELEASE_VERSION" ]; then
            echo "Release version is not set." >&2
            exit 1
          fi
          for pkg_json in packages/*/package.json; do
            [ -f "$pkg_json" ] || continue
            PKG_NAME=$(jq -r '.name' "$pkg_json")
            PRIVATE=$(jq -r '.private // false' "$pkg_json")
            if [ "$PRIVATE" = "true" ]; then
              echo "Skipping private package $PKG_NAME"
              continue
            fi
            tmp=$(mktemp)
            jq --arg v "$RELEASE_VERSION" '.version = $v' "$pkg_json" > "$tmp"
            mv "$tmp" "$pkg_json"
            echo "Set $PKG_NAME version to $RELEASE_VERSION"
          done

      - name: Build packages
        working-directory: web
        run: pnpm -r --filter "./packages/*" run build

      - name: Run package tests
        working-directory: web
        run: pnpm -r --filter "./packages/*" run test

      - name: Publish packages to npm
        working-directory: web
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          if [ -z "$NODE_AUTH_TOKEN" ]; then
            echo "NPM_TOKEN secret is not configured." >&2
            exit 1
          fi
          pnpm publish -r --filter "./packages/*" --no-git-checks
