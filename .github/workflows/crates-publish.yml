name: Crates Publish

env:
  CRATES_TO_PUBLISH: "thru-base thru-grpc-client thru-cli"

on:
  release:
    types: [published]

jobs:
  guard:
    if: ${{ github.repository == 'Unto-Labs/thru' }}
    runs-on: ubuntu-latest
    outputs:
      should_publish: ${{ steps.guard.outputs.should_publish }}
      tag: ${{ steps.release.outputs.tag }}
      version: ${{ steps.release.outputs.version }}

    steps:
      - name: Determine release metadata
        id: release
        env:
          TAG_NAME: ${{ github.event.release.tag_name }}
        run: |
          TAG="$TAG_NAME"
          if [ -z "$TAG" ]; then
            echo "Release tag missing" >&2
            exit 1
          fi
          VERSION="${TAG#v}"
          if [ -z "$VERSION" ]; then
            echo "Unable to derive version from tag '$TAG'" >&2
            exit 1
          fi
          BASE_VERSION="${VERSION%%-*}"
          if [ -z "$BASE_VERSION" ]; then
            echo "Unable to derive base version from tag '$TAG'" >&2
            exit 1
          fi
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "version=$BASE_VERSION" >> "$GITHUB_OUTPUT"

      - name: Evaluate publish conditions
        id: guard
        env:
          IS_PRERELEASE: ${{ github.event.release.prerelease }}
        run: |
          if [ "$IS_PRERELEASE" = "true" ]; then
            echo "should_publish=false" >> "$GITHUB_OUTPUT"
          else
            echo "should_publish=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Publishing skipped
        if: ${{ steps.guard.outputs.should_publish != 'true' }}
        env:
          TAG: ${{ steps.release.outputs.tag }}
          IS_PRERELEASE: ${{ github.event.release.prerelease }}
        run: |
          echo "Skipping publish for tag $TAG (prerelease=$IS_PRERELEASE)"

  publish-crates:
    needs: guard
    if: ${{ needs.guard.outputs.should_publish == 'true' && github.repository == 'Unto-Labs/thru' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      RELEASE_VERSION: ${{ needs.guard.outputs.version }}

    steps:
      - name: Checkout release tag
        uses: actions/checkout@v5
        with:
          ref: ${{ needs.guard.outputs.tag }}
          fetch-depth: 0

      - name: Ensure crates.io token
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          if [ -z "$CARGO_REGISTRY_TOKEN" ]; then
            echo "CARGO_REGISTRY_TOKEN secret is not configured." >&2
            exit 1
          fi

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install buf
        run: |
          if ! command -v buf >/dev/null 2>&1; then
            BUF_VERSION=1.44.0
            curl -sSL "https://github.com/bufbuild/buf/releases/download/v${BUF_VERSION}/buf-Linux-x86_64.tar.gz" -o /tmp/buf.tar.gz
            sudo tar -xzf /tmp/buf.tar.gz -C /usr/local --strip-components=1
          fi

      - name: Install cargo-edit
        run: |
          if ! command -v cargo-set-version >/dev/null 2>&1; then
            cargo install cargo-edit --locked
          fi

      - name: Sync crate versions with release
        working-directory: rpc
        env:
          RELEASE_VERSION: ${{ env.RELEASE_VERSION }}
        run: |
          set -euo pipefail
          if [ -z "$RELEASE_VERSION" ]; then
            echo "Release version is not set." >&2
            exit 1
          fi
          for crate in $CRATES_TO_PUBLISH; do
            echo "Updating $crate to version $RELEASE_VERSION"
            cargo set-version --package "$crate" "$RELEASE_VERSION"
          done

      - name: Cache cargo build artifacts
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            rpc

      - name: Run crate publishes
        working-directory: rpc
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          set -euo pipefail
          for crate in $CRATES_TO_PUBLISH; do
            echo "Running cargo publish for $crate"
            cargo publish -p "$crate"
          done
