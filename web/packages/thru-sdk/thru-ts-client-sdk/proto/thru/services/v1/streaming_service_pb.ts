// @generated by protoc-gen-es v2.9.0 with parameter "target=ts"
// @generated from file thru/services/v1/streaming_service.proto (package thru.services.v1, edition 2023)
// option features.field_presence = EXPLICIT;
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import { file_buf_validate_validate } from "../../../buf/validate/validate_pb";
import { file_google_api_field_behavior } from "../../../google/api/field_behavior_pb";
import type { Duration, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_duration, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { ConsensusStatus } from "../../common/v1/consensus_pb";
import { file_thru_common_v1_consensus } from "../../common/v1/consensus_pb";
import type { Filter } from "../../common/v1/filters_pb";
import { file_thru_common_v1_filters } from "../../common/v1/filters_pb";
import type { Account, AccountMeta, AccountPage, AccountView } from "../../core/v1/account_pb";
import { file_thru_core_v1_account } from "../../core/v1/account_pb";
import type { Block, BlockView } from "../../core/v1/block_pb";
import { file_thru_core_v1_block } from "../../core/v1/block_pb";
import type { Transaction, TransactionExecutionResult } from "../../core/v1/transaction_pb";
import { file_thru_core_v1_transaction } from "../../core/v1/transaction_pb";
import type { Pubkey, Signature } from "../../core/v1/types_pb";
import { file_thru_core_v1_types } from "../../core/v1/types_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file thru/services/v1/streaming_service.proto.
 */
export const file_thru_services_v1_streaming_service: GenFile = /*@__PURE__*/
  fileDesc("Cih0aHJ1L3NlcnZpY2VzL3YxL3N0cmVhbWluZ19zZXJ2aWNlLnByb3RvEhB0aHJ1LnNlcnZpY2VzLnYxIsQBChNTdHJlYW1CbG9ja3NSZXF1ZXN0EhcKCnN0YXJ0X3Nsb3QYASABKARCA+BBARIrCgZmaWx0ZXIYAiABKAsyFi50aHJ1LmNvbW1vbi52MS5GaWx0ZXJCA+BBARIqCgR2aWV3GAMgASgOMhcudGhydS5jb3JlLnYxLkJsb2NrVmlld0ID4EEBEjsKDW1pbl9jb25zZW5zdXMYBCABKA4yHy50aHJ1LmNvbW1vbi52MS5Db25zZW5zdXNTdGF0dXNCA+BBASI/ChRTdHJlYW1CbG9ja3NSZXNwb25zZRInCgVibG9jaxgBIAEoCzITLnRocnUuY29yZS52MS5CbG9ja0ID4EECIqQBChtTdHJlYW1BY2NvdW50VXBkYXRlc1JlcXVlc3QSKgoHYWRkcmVzcxgBIAEoCzIULnRocnUuY29yZS52MS5QdWJrZXlCA+BBAhIsCgR2aWV3GAIgASgOMhkudGhydS5jb3JlLnYxLkFjY291bnRWaWV3QgPgQQESKwoGZmlsdGVyGAQgASgLMhYudGhydS5jb21tb24udjEuRmlsdGVyQgPgQQEikwEKDUFjY291bnRVcGRhdGUSEQoEc2xvdBgBIAEoBEID4EECEiwKBHBhZ2UYAiABKAsyGS50aHJ1LmNvcmUudjEuQWNjb3VudFBhZ2VCA+BBARIsCgRtZXRhGAMgASgLMhkudGhydS5jb3JlLnYxLkFjY291bnRNZXRhQgPgQQESEwoGZGVsZXRlGAQgASgIQgPgQQEihwEKHFN0cmVhbUFjY291bnRVcGRhdGVzUmVzcG9uc2USKQoIc25hcHNob3QYASABKAsyFS50aHJ1LmNvcmUudjEuQWNjb3VudEgAEjEKBnVwZGF0ZRgCIAEoCzIfLnRocnUuc2VydmljZXMudjEuQWNjb3VudFVwZGF0ZUgAQgkKB21lc3NhZ2UihQEKGVN0cmVhbVRyYW5zYWN0aW9uc1JlcXVlc3QSKwoGZmlsdGVyGAEgASgLMhYudGhydS5jb21tb24udjEuRmlsdGVyQgPgQQESOwoNbWluX2NvbnNlbnN1cxgCIAEoDjIfLnRocnUuY29tbW9uLnYxLkNvbnNlbnN1c1N0YXR1c0ID4EEBIlEKGlN0cmVhbVRyYW5zYWN0aW9uc1Jlc3BvbnNlEjMKC3RyYW5zYWN0aW9uGAEgASgLMhkudGhydS5jb3JlLnYxLlRyYW5zYWN0aW9uQgPgQQIiQgoTU3RyZWFtRXZlbnRzUmVxdWVzdBIrCgZmaWx0ZXIYASABKAsyFi50aHJ1LmNvbW1vbi52MS5GaWx0ZXJCA+BBASL+AQoUU3RyZWFtRXZlbnRzUmVzcG9uc2USFQoIZXZlbnRfaWQYASABKAlCA+BBAhIUCgdwYXlsb2FkGAIgASgMQgPgQQESMgoJdGltZXN0YW1wGAMgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEID4EEBEioKB3Byb2dyYW0YBCABKAsyFC50aHJ1LmNvcmUudjEuUHVia2V5QgPgQQISFQoIY2FsbF9pZHgYBSABKA1CA+BBAhIvCglzaWduYXR1cmUYBiABKAsyFy50aHJ1LmNvcmUudjEuU2lnbmF0dXJlQgPgQQISEQoEc2xvdBgHIAEoBEID4EECInsKF1RyYWNrVHJhbnNhY3Rpb25SZXF1ZXN0Ei8KCXNpZ25hdHVyZRgBIAEoCzIXLnRocnUuY29yZS52MS5TaWduYXR1cmVCA+BBAhIvCgd0aW1lb3V0GAIgASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uQgPgQQEi1AEKGFRyYWNrVHJhbnNhY3Rpb25SZXNwb25zZRIvCglzaWduYXR1cmUYASABKAsyFy50aHJ1LmNvcmUudjEuU2lnbmF0dXJlQgPgQQISPgoQY29uc2Vuc3VzX3N0YXR1cxgCIAEoDjIfLnRocnUuY29tbW9uLnYxLkNvbnNlbnN1c1N0YXR1c0ID4EEBEkcKEGV4ZWN1dGlvbl9yZXN1bHQYAyABKAsyKC50aHJ1LmNvcmUudjEuVHJhbnNhY3Rpb25FeGVjdXRpb25SZXN1bHRCA+BBATKtBAoQU3RyZWFtaW5nU2VydmljZRJfCgxTdHJlYW1CbG9ja3MSJS50aHJ1LnNlcnZpY2VzLnYxLlN0cmVhbUJsb2Nrc1JlcXVlc3QaJi50aHJ1LnNlcnZpY2VzLnYxLlN0cmVhbUJsb2Nrc1Jlc3BvbnNlMAESdwoUU3RyZWFtQWNjb3VudFVwZGF0ZXMSLS50aHJ1LnNlcnZpY2VzLnYxLlN0cmVhbUFjY291bnRVcGRhdGVzUmVxdWVzdBouLnRocnUuc2VydmljZXMudjEuU3RyZWFtQWNjb3VudFVwZGF0ZXNSZXNwb25zZTABEnEKElN0cmVhbVRyYW5zYWN0aW9ucxIrLnRocnUuc2VydmljZXMudjEuU3RyZWFtVHJhbnNhY3Rpb25zUmVxdWVzdBosLnRocnUuc2VydmljZXMudjEuU3RyZWFtVHJhbnNhY3Rpb25zUmVzcG9uc2UwARJfCgxTdHJlYW1FdmVudHMSJS50aHJ1LnNlcnZpY2VzLnYxLlN0cmVhbUV2ZW50c1JlcXVlc3QaJi50aHJ1LnNlcnZpY2VzLnYxLlN0cmVhbUV2ZW50c1Jlc3BvbnNlMAESawoQVHJhY2tUcmFuc2FjdGlvbhIpLnRocnUuc2VydmljZXMudjEuVHJhY2tUcmFuc2FjdGlvblJlcXVlc3QaKi50aHJ1LnNlcnZpY2VzLnYxLlRyYWNrVHJhbnNhY3Rpb25SZXNwb25zZTABQuUBChRjb20udGhydS5zZXJ2aWNlcy52MUIVU3RyZWFtaW5nU2VydmljZVByb3RvUAFaSGdpdGh1Yi5jb20vVW50by1MYWJzL3RocnUtbmV0L2dycGMvcGtnL3Byb3RvL3RocnUvc2VydmljZXMvdjE7c2VydmljZXN2MaICA1RTWKoCEFRocnUuU2VydmljZXMuVjG6AgRUSFVTygIQVGhydVxTZXJ2aWNlc1xWMeICHFRocnVcU2VydmljZXNcVjFcR1BCTWV0YWRhdGHqAhJUaHJ1OjpTZXJ2aWNlczo6VjGSAwIIAWIIZWRpdGlvbnNw6Ac", [file_buf_validate_validate, file_google_api_field_behavior, file_google_protobuf_duration, file_google_protobuf_timestamp, file_thru_common_v1_consensus, file_thru_common_v1_filters, file_thru_core_v1_account, file_thru_core_v1_block, file_thru_core_v1_transaction, file_thru_core_v1_types]);

/**
 * StreamBlocksRequest subscribes to real-time block updates.
 *
 * @generated from message thru.services.v1.StreamBlocksRequest
 */
export type StreamBlocksRequest = Message<"thru.services.v1.StreamBlocksRequest"> & {
  /**
   * @generated from field: uint64 start_slot = 1;
   */
  startSlot: bigint;

  /**
   * @generated from field: thru.common.v1.Filter filter = 2;
   */
  filter?: Filter;

  /**
   * @generated from field: thru.core.v1.BlockView view = 3;
   */
  view: BlockView;

  /**
   * @generated from field: thru.common.v1.ConsensusStatus min_consensus = 4;
   */
  minConsensus: ConsensusStatus;
};

/**
 * Describes the message thru.services.v1.StreamBlocksRequest.
 * Use `create(StreamBlocksRequestSchema)` to create a new message.
 */
export const StreamBlocksRequestSchema: GenMessage<StreamBlocksRequest> = /*@__PURE__*/
  messageDesc(file_thru_services_v1_streaming_service, 0);

/**
 * StreamBlocksResponse delivers block updates.
 *
 * @generated from message thru.services.v1.StreamBlocksResponse
 */
export type StreamBlocksResponse = Message<"thru.services.v1.StreamBlocksResponse"> & {
  /**
   * @generated from field: thru.core.v1.Block block = 1;
   */
  block?: Block;
};

/**
 * Describes the message thru.services.v1.StreamBlocksResponse.
 * Use `create(StreamBlocksResponseSchema)` to create a new message.
 */
export const StreamBlocksResponseSchema: GenMessage<StreamBlocksResponse> = /*@__PURE__*/
  messageDesc(file_thru_services_v1_streaming_service, 1);

/**
 * StreamAccountUpdatesRequest subscribes to account delta events.
 *
 * @generated from message thru.services.v1.StreamAccountUpdatesRequest
 */
export type StreamAccountUpdatesRequest = Message<"thru.services.v1.StreamAccountUpdatesRequest"> & {
  /**
   * @generated from field: thru.core.v1.Pubkey address = 1;
   */
  address?: Pubkey;

  /**
   * @generated from field: thru.core.v1.AccountView view = 2;
   */
  view: AccountView;

  /**
   * @generated from field: thru.common.v1.Filter filter = 4;
   */
  filter?: Filter;
};

/**
 * Describes the message thru.services.v1.StreamAccountUpdatesRequest.
 * Use `create(StreamAccountUpdatesRequestSchema)` to create a new message.
 */
export const StreamAccountUpdatesRequestSchema: GenMessage<StreamAccountUpdatesRequest> = /*@__PURE__*/
  messageDesc(file_thru_services_v1_streaming_service, 2);

/**
 * AccountUpdate describes a delta for an account.
 *
 * @generated from message thru.services.v1.AccountUpdate
 */
export type AccountUpdate = Message<"thru.services.v1.AccountUpdate"> & {
  /**
   * @generated from field: uint64 slot = 1;
   */
  slot: bigint;

  /**
   * @generated from field: thru.core.v1.AccountPage page = 2;
   */
  page?: AccountPage;

  /**
   * @generated from field: thru.core.v1.AccountMeta meta = 3;
   */
  meta?: AccountMeta;

  /**
   * @generated from field: bool delete = 4;
   */
  delete: boolean;
};

/**
 * Describes the message thru.services.v1.AccountUpdate.
 * Use `create(AccountUpdateSchema)` to create a new message.
 */
export const AccountUpdateSchema: GenMessage<AccountUpdate> = /*@__PURE__*/
  messageDesc(file_thru_services_v1_streaming_service, 3);

/**
 * StreamAccountUpdatesResponse contains either an initial snapshot or a delta.
 *
 * @generated from message thru.services.v1.StreamAccountUpdatesResponse
 */
export type StreamAccountUpdatesResponse = Message<"thru.services.v1.StreamAccountUpdatesResponse"> & {
  /**
   * @generated from oneof thru.services.v1.StreamAccountUpdatesResponse.message
   */
  message: {
    /**
     * @generated from field: thru.core.v1.Account snapshot = 1;
     */
    value: Account;
    case: "snapshot";
  } | {
    /**
     * @generated from field: thru.services.v1.AccountUpdate update = 2;
     */
    value: AccountUpdate;
    case: "update";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message thru.services.v1.StreamAccountUpdatesResponse.
 * Use `create(StreamAccountUpdatesResponseSchema)` to create a new message.
 */
export const StreamAccountUpdatesResponseSchema: GenMessage<StreamAccountUpdatesResponse> = /*@__PURE__*/
  messageDesc(file_thru_services_v1_streaming_service, 4);

/**
 * StreamTransactionsRequest subscribes to transaction confirmations.
 *
 * @generated from message thru.services.v1.StreamTransactionsRequest
 */
export type StreamTransactionsRequest = Message<"thru.services.v1.StreamTransactionsRequest"> & {
  /**
   * @generated from field: thru.common.v1.Filter filter = 1;
   */
  filter?: Filter;

  /**
   * @generated from field: thru.common.v1.ConsensusStatus min_consensus = 2;
   */
  minConsensus: ConsensusStatus;
};

/**
 * Describes the message thru.services.v1.StreamTransactionsRequest.
 * Use `create(StreamTransactionsRequestSchema)` to create a new message.
 */
export const StreamTransactionsRequestSchema: GenMessage<StreamTransactionsRequest> = /*@__PURE__*/
  messageDesc(file_thru_services_v1_streaming_service, 5);

/**
 * StreamTransactionsResponse delivers transaction events.
 *
 * @generated from message thru.services.v1.StreamTransactionsResponse
 */
export type StreamTransactionsResponse = Message<"thru.services.v1.StreamTransactionsResponse"> & {
  /**
   * @generated from field: thru.core.v1.Transaction transaction = 1;
   */
  transaction?: Transaction;
};

/**
 * Describes the message thru.services.v1.StreamTransactionsResponse.
 * Use `create(StreamTransactionsResponseSchema)` to create a new message.
 */
export const StreamTransactionsResponseSchema: GenMessage<StreamTransactionsResponse> = /*@__PURE__*/
  messageDesc(file_thru_services_v1_streaming_service, 6);

/**
 * StreamEventsRequest subscribes to chain events.
 *
 * @generated from message thru.services.v1.StreamEventsRequest
 */
export type StreamEventsRequest = Message<"thru.services.v1.StreamEventsRequest"> & {
  /**
   * @generated from field: thru.common.v1.Filter filter = 1;
   */
  filter?: Filter;
};

/**
 * Describes the message thru.services.v1.StreamEventsRequest.
 * Use `create(StreamEventsRequestSchema)` to create a new message.
 */
export const StreamEventsRequestSchema: GenMessage<StreamEventsRequest> = /*@__PURE__*/
  messageDesc(file_thru_services_v1_streaming_service, 7);

/**
 * StreamEventsResponse delivers event payloads.
 *
 * @generated from message thru.services.v1.StreamEventsResponse
 */
export type StreamEventsResponse = Message<"thru.services.v1.StreamEventsResponse"> & {
  /**
   * @generated from field: string event_id = 1;
   */
  eventId: string;

  /**
   * @generated from field: bytes payload = 2;
   */
  payload: Uint8Array;

  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 3;
   */
  timestamp?: Timestamp;

  /**
   * @generated from field: thru.core.v1.Pubkey program = 4;
   */
  program?: Pubkey;

  /**
   * @generated from field: uint32 call_idx = 5;
   */
  callIdx: number;

  /**
   * @generated from field: thru.core.v1.Signature signature = 6;
   */
  signature?: Signature;

  /**
   * @generated from field: uint64 slot = 7;
   */
  slot: bigint;
};

/**
 * Describes the message thru.services.v1.StreamEventsResponse.
 * Use `create(StreamEventsResponseSchema)` to create a new message.
 */
export const StreamEventsResponseSchema: GenMessage<StreamEventsResponse> = /*@__PURE__*/
  messageDesc(file_thru_services_v1_streaming_service, 8);

/**
 * TrackTransactionRequest subscribes to status updates for a transaction.
 *
 * @generated from message thru.services.v1.TrackTransactionRequest
 */
export type TrackTransactionRequest = Message<"thru.services.v1.TrackTransactionRequest"> & {
  /**
   * @generated from field: thru.core.v1.Signature signature = 1;
   */
  signature?: Signature;

  /**
   * @generated from field: google.protobuf.Duration timeout = 2;
   */
  timeout?: Duration;
};

/**
 * Describes the message thru.services.v1.TrackTransactionRequest.
 * Use `create(TrackTransactionRequestSchema)` to create a new message.
 */
export const TrackTransactionRequestSchema: GenMessage<TrackTransactionRequest> = /*@__PURE__*/
  messageDesc(file_thru_services_v1_streaming_service, 9);

/**
 * TrackTransactionResponse reports status transitions for a transaction.
 *
 * @generated from message thru.services.v1.TrackTransactionResponse
 */
export type TrackTransactionResponse = Message<"thru.services.v1.TrackTransactionResponse"> & {
  /**
   * @generated from field: thru.core.v1.Signature signature = 1;
   */
  signature?: Signature;

  /**
   * @generated from field: thru.common.v1.ConsensusStatus consensus_status = 2;
   */
  consensusStatus: ConsensusStatus;

  /**
   * @generated from field: thru.core.v1.TransactionExecutionResult execution_result = 3;
   */
  executionResult?: TransactionExecutionResult;
};

/**
 * Describes the message thru.services.v1.TrackTransactionResponse.
 * Use `create(TrackTransactionResponseSchema)` to create a new message.
 */
export const TrackTransactionResponseSchema: GenMessage<TrackTransactionResponse> = /*@__PURE__*/
  messageDesc(file_thru_services_v1_streaming_service, 10);

/**
 * StreamingService serves server-streaming gRPC APIs for real-time data.
 *
 * @generated from service thru.services.v1.StreamingService
 */
export const StreamingService: GenService<{
  /**
   * @generated from rpc thru.services.v1.StreamingService.StreamBlocks
   */
  streamBlocks: {
    methodKind: "server_streaming";
    input: typeof StreamBlocksRequestSchema;
    output: typeof StreamBlocksResponseSchema;
  },
  /**
   * @generated from rpc thru.services.v1.StreamingService.StreamAccountUpdates
   */
  streamAccountUpdates: {
    methodKind: "server_streaming";
    input: typeof StreamAccountUpdatesRequestSchema;
    output: typeof StreamAccountUpdatesResponseSchema;
  },
  /**
   * @generated from rpc thru.services.v1.StreamingService.StreamTransactions
   */
  streamTransactions: {
    methodKind: "server_streaming";
    input: typeof StreamTransactionsRequestSchema;
    output: typeof StreamTransactionsResponseSchema;
  },
  /**
   * @generated from rpc thru.services.v1.StreamingService.StreamEvents
   */
  streamEvents: {
    methodKind: "server_streaming";
    input: typeof StreamEventsRequestSchema;
    output: typeof StreamEventsResponseSchema;
  },
  /**
   * @generated from rpc thru.services.v1.StreamingService.TrackTransaction
   */
  trackTransaction: {
    methodKind: "server_streaming";
    input: typeof TrackTransactionRequestSchema;
    output: typeof TrackTransactionResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_thru_services_v1_streaming_service, 0);

